package handlers

import (
	"fmt"
	"math/rand"
	nethttp "net/http"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/skeptycal/gosimple/http/simpleserver"
)

var (
	bar      *charts.Bar = generateBarChart()
	handlers             = simpleserver.New("test")
)

func Root(w nethttp.ResponseWriter, req *nethttp.Request) {
	fmt.Fprintf(w, "%v\n", req.URL)
}

func Headers(w nethttp.ResponseWriter, req *nethttp.Request) {
	req.Header.Clone().Write(w)
}

func Graph(w nethttp.ResponseWriter, req *nethttp.Request) {
	bar = generateBarChart()
	_ = req
	bar.Render(w)
}

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

// generate sample bar chart with random data
func generateBarChart() *charts.Bar {
	// create a new bar instance
	bar := charts.NewBar()
	if bar == nil {
		return nil // , errors.New("error creating bar chart")
	}

	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())

	return bar
}
